{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","invalid","shouldValidate","touched","elementType","elementConfig","label","value","changed","inputElement","inputClasses","classes","InputElement","push","Invalid","className","join","onChange","options","map","option","displayValue","Input","Label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","requierd","isEmail","valid","minLength","controls","setControls","isSingUp","setIsSingUp","useEffect","formElementsArray","key","id","config","form","formElement","e","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","modeMessage","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.568bb83b.chunk.js","sourcesContent":["import classes from \"./Input.module.css\";\r\nconst input = ({\r\n  invalid,\r\n  shouldValidate,\r\n  touched,\r\n  elementType,\r\n  elementConfig,\r\n  label,\r\n  value,\r\n  changed,\r\n}) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (invalid && shouldValidate && touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n  switch (elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...elementConfig}\r\n          value={value}\r\n          onChange={changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...elementConfig}\r\n          value={value}\r\n          onChange={changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={value}\r\n        >\r\n          {elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...elementConfig}\r\n          value={value}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__16lQj\",\"Label\":\"Input_Label__30Pir\",\"InputElement\":\"Input_InputElement__2ZLfk\",\"Invalid\":\"Input_Invalid__MHoU8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1epjk\"};","import { useState, useEffect } from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\nconst Auth = ({\r\n  buildingBurger,\r\n  authRedirectPath,\r\n  onSetAuthRedirectPath,\r\n  onAuth,\r\n  loading,\r\n  error,\r\n  isAuthenticated,\r\n}) => {\r\n  const [controls, setControls] = useState({\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Mail Address\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        requierd: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"password\",\r\n        placeholder: \"Password\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        requierd: true,\r\n        minLength: 6,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  });\r\n\r\n  const [isSingUp, setIsSingUp] = useState(true);\r\n  useEffect(() => {\r\n    if (buildingBurger && authRedirectPath !== \"/\") {\r\n      onSetAuthRedirectPath();\r\n    }\r\n  }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\r\n\r\n  const inputChangedHandler = (e, controlName) => {\r\n    const updatedControls = updateObject(controls, {\r\n      [controlName]: updateObject(controls[controlName], {\r\n        value: e.target.value,\r\n        valid: checkValidity(e.target.value, controls[controlName].validation),\r\n        touched: true,\r\n      }),\r\n    });\r\n    setControls(updatedControls);\r\n  };\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    onAuth(controls.email.value, controls.password.value, isSingUp);\r\n  };\r\n  const switchModeHandler = () => {\r\n    setIsSingUp(!isSingUp);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in controls) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: controls[key],\r\n    });\r\n  }\r\n  let form = formElementsArray.map((formElement) => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      changed={(e) => inputChangedHandler(e, formElement.id)}\r\n      invalid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n    />\r\n  ));\r\n  if (loading) {\r\n    form = <Spinner />;\r\n  }\r\n  let errorMessage = null;\r\n  if (error) {\r\n    errorMessage = <p>{error.message}</p>;\r\n  }\r\n  let authRedirect = null;\r\n\r\n  if (isAuthenticated && buildingBurger) {\r\n    authRedirect = <Redirect to=\"/checkout\" />;\r\n  } else if (isAuthenticated) {\r\n    authRedirect = <Redirect to=\"/\" />;\r\n  }\r\n  let modeMessage = <strong>YOU ARE ON SING UP PAGE</strong>;\r\n  if (!isSingUp) {\r\n    modeMessage = <strong>YOU ARE ON SING IN PAGE</strong>;\r\n  }\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      {errorMessage}\r\n      {modeMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n      </form>\r\n      <Button btnType=\"Danger\" clicked={switchModeHandler}>\r\n        SWITCH TO {isSingUp ? \"SING IN\" : \"SING UP\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}