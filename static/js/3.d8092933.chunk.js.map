{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","invalid","shouldValidate","touched","elementType","elementConfig","label","value","changed","inputElement","inputClasses","classes","InputElement","push","Invalid","className","join","onChange","options","map","option","displayValue","Input","Label","module","exports","checkoutSummary","ingredients","onCheckoutCancelled","onCheckoutContinued","CheckoutSummary","style","width","margin","Burger","Button","btnType","clicked","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userID","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","key","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","history","match","summary","to","purchasedRedirect","replace","goBack","path","component"],"mappings":"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","file":"static/js/3.d8092933.chunk.js","sourcesContent":["import classes from \"./Input.module.css\";\r\nconst input = ({\r\n  invalid,\r\n  shouldValidate,\r\n  touched,\r\n  elementType,\r\n  elementConfig,\r\n  label,\r\n  value,\r\n  changed,\r\n}) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (invalid && shouldValidate && touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n  switch (elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...elementConfig}\r\n          value={value}\r\n          onChange={changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...elementConfig}\r\n          value={value}\r\n          onChange={changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={value}\r\n        >\r\n          {elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...elementConfig}\r\n          value={value}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__16lQj\",\"Label\":\"Input_Label__30Pir\",\"InputElement\":\"Input_InputElement__2ZLfk\",\"Invalid\":\"Input_Invalid__MHoU8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__yPPzg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1Ia-h\",\"Input\":\"ContactData_Input__2LTUw\"};","import Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\nconst checkoutSummary = ({\r\n  ingredients,\r\n  onCheckoutCancelled,\r\n  onCheckoutContinued,\r\n}) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={ingredients} />\r\n        <Button btnType=\"Danger\" clicked={onCheckoutCancelled}>\r\n          CANCEL\r\n        </Button>\r\n        <Button btnType=\"Success\" clicked={onCheckoutContinued}>\r\n          CONTINUE\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nconst ContactData = ({\r\n  ings,\r\n  price,\r\n  userID,\r\n  onOrderBurger,\r\n  token,\r\n  loading,\r\n}) => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Name\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Street\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    zipCode: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"ZIP Code\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 4,\r\n        maxLength: 10,\r\n        isNumeric: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    country: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Country\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Your E-Mail\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      elementType: \"select\",\r\n      elementConfig: {\r\n        options: [\r\n          { value: \"fastest\", displayValue: \"Fastest\" },\r\n          { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n        ],\r\n      },\r\n      value: \"fastest\",\r\n      validation: {},\r\n      valid: true,\r\n    },\r\n  });\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n    }\r\n    const order = {\r\n      ingredients: ings,\r\n      price: price,\r\n      orderData: formData,\r\n      userID: userID,\r\n    };\r\n\r\n    onOrderBurger(order, token);\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        orderForm[inputIdentifier].validation\r\n      ),\r\n      touched: true,\r\n    });\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(formIsValid);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n  let form = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map((formElement) => (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={(event) => inputChangedHandler(event, formElement.id)}\r\n        />\r\n      ))}\r\n      <Button btnType=\"Success\" disabled={!formIsValid}>\r\n        ORDER\r\n      </Button>\r\n    </form>\r\n  );\r\n  if (loading) {\r\n    form = <Spinner />;\r\n  }\r\n  return (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your Contact Data</h4>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userID: state.auth.userID,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nconst Checkout = ({ history, purchased, ings, match }) => {\r\n  const checkoutContinuedHandler = () => {\r\n    history.replace(\"/checkout/contact-data\");\r\n  };\r\n  const checkoutCancelledHandler = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  let summary = <Redirect to=\"/\" />;\r\n\r\n  if (ings) {\r\n    const purchasedRedirect = purchased ? <Redirect to=\"/\" /> : null;\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          ingredients={ings}\r\n          onCheckoutContinued={checkoutContinuedHandler}\r\n          onCheckoutCancelled={checkoutCancelledHandler}\r\n        />\r\n        <Route path={match.path + \"/contact-data\"} component={ContactData} />\r\n      </div>\r\n    );\r\n  }\r\n  return <div>{summary}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}