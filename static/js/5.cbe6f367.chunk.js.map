{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","price","orderRemove","ingredients","ingredientsTransformed","ingredientName","push","name","amount","ingredientOutput","map","ingredient","style","textTransform","display","margin","border","padding","className","classes","Order","parseFloat","toFixed","Button","btnType","clicked","connect","state","orders","loading","token","auth","userID","dispatch","onFetchOrders","actions","onDeleteOrder","orderId","withErrorHandler","useEffect","ordersList","Spinner","id","length","textAlign","axios"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,MAAQ,uB,oGCwCXC,EAtCD,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAC7BC,EAAyB,GAC/B,IAAK,IAAIC,KAAkBF,EACzBC,EAAuBE,KAAK,CAC1BC,KAAMF,EACNG,OAAQL,EAAYE,KAGxB,IAAMI,EAAmBL,EAAuBM,KAAI,SAACC,GACnD,OACE,uBAEEC,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,GAPb,UAUGN,EAAWJ,KAVd,KAUsBI,EAAWH,OAVjC,MACOG,EAAWJ,SActB,OACE,sBAAKW,UAAWC,IAAQC,MAAxB,UACE,8CAAiBX,EAAjB,OACA,wCACS,0CAAaY,WAAWpB,GAAOqB,QAAQ,SAEhD,cAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASvB,EAAlC,wB,uBCyBSwB,uBAjBS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAM3B,MAAM4B,OACpBC,QAASF,EAAM3B,MAAM6B,QACrBC,MAAOH,EAAMI,KAAKD,MAClBE,OAAQL,EAAMI,KAAKC,WAGI,SAACC,GAC1B,MAAO,CACLC,cAAe,SAACJ,EAAOE,GAAR,OACbC,EAASE,IAAoBL,EAAOE,KACtCI,cAAe,SAACC,EAAST,GAAV,OACbK,EAASE,IAAoBE,EAAST,QAI7BF,CAGbY,aAtDa,SAAC,GAOT,IANLR,EAMI,EANJA,MACAE,EAKI,EALJA,OACAE,EAII,EAJJA,cACAL,EAGI,EAHJA,QACAD,EAEI,EAFJA,OACAQ,EACI,EADJA,cAEAG,qBAAU,WACRL,EAAcJ,EAAOE,KACpB,CAACE,EAAeJ,EAAOE,IAE1B,IAIIQ,EAAa,cAACC,EAAA,EAAD,IAgBjB,OAfKZ,IACHW,EAAaZ,EAAOlB,KAAI,SAACV,GAAD,OACtB,cAACoB,EAAD,CAEEjB,YAAaH,EAAMG,YACnBF,MAAOD,EAAMC,MACbC,YAAa,kBAXSmC,EAWgBrC,EAAM0C,QAVhDN,EAAcC,EAAST,GADE,IAACS,IAQjBrC,EAAM0C,QAObd,EAAOe,QAAU,IAAMd,IACzBW,EACE,mBAAG5B,MAAO,CAAEgC,UAAW,UAAvB,+CAGG,8BAAMJ,MAsBYK","file":"static/js/5.cbe6f367.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__1y2BT\"};","import classes from \"./Order.module.css\";\r\nimport Button from \"../UI/Button/Button\";\r\n\r\nconst order = ({ price, orderRemove, ingredients }) => {\r\n  const ingredientsTransformed = [];\r\n  for (let ingredientName in ingredients) {\r\n    ingredientsTransformed.push({\r\n      name: ingredientName,\r\n      amount: ingredients[ingredientName],\r\n    });\r\n  }\r\n  const ingredientOutput = ingredientsTransformed.map((ingredient) => {\r\n    return (\r\n      <span\r\n        key={ingredient.name}\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          display: \"inline-block\",\r\n          margin: \"0 5px\",\r\n          border: \"1px solid grey\",\r\n          padding: 5,\r\n        }}\r\n      >\r\n        {ingredient.name} ({ingredient.amount})\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={classes.Order}>\r\n      <p>Ingredients: {ingredientOutput} </p>\r\n      <p>\r\n        Price: <strong>USD {parseFloat(price).toFixed(2)}</strong>\r\n      </p>\r\n      <Button btnType=\"Delete\" clicked={orderRemove}>\r\n        DELETE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default order;\r\n","import { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"../../axios-orders\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nconst Orders = ({\r\n  token,\r\n  userID,\r\n  onFetchOrders,\r\n  loading,\r\n  orders,\r\n  onDeleteOrder,\r\n}) => {\r\n  useEffect(() => {\r\n    onFetchOrders(token, userID);\r\n  }, [onFetchOrders, token, userID]);\r\n\r\n  const removeOrderHandler = (orderId) => {\r\n    onDeleteOrder(orderId, orders);\r\n  };\r\n\r\n  let ordersList = <Spinner />;\r\n  if (!loading) {\r\n    ordersList = orders.map((order) => (\r\n      <Order\r\n        key={order.id}\r\n        ingredients={order.ingredients}\r\n        price={order.price}\r\n        orderRemove={() => removeOrderHandler(order.id)}\r\n      />\r\n    ));\r\n  }\r\n  if (orders.length <= 0 && !loading) {\r\n    ordersList = (\r\n      <p style={{ textAlign: \"center\" }}>You haven't ordered anything yet</p>\r\n    );\r\n  }\r\n  return <div>{ordersList}</div>;\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userID: state.auth.userID,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchOrders: (token, userID) =>\r\n      dispatch(actions.fetchOrders(token, userID)),\r\n    onDeleteOrder: (orderId, orders) =>\r\n      dispatch(actions.deleteOrder(orderId, orders)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(Orders, axios));\r\n"],"sourceRoot":""}